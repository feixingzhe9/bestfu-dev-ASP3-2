/***************************Copyright BestFu 2015-11-02*************************
文 件:	KeyUnit.c
说 明:	开关执行器驱动性实现文件
编 辑:	Keil uVision5 V5.12
版 本:	v1.0
编 写:	Jay
日 期:	2015.11.02
修 改:	暂无
*******************************************************************************/
#include "KeyUnit.h"
#include "sys.h"
#include "relay.h"
#include "SwitchUnit.h"
#include "LedUnit.h"
#include "Thread.h"
#include "ImportFilter.h"
#include "DlyAttrProcess.h"

/*******************************变量定义*************************************/
const KeyPort_t KeyPort[3]  = {	{PORT_GPIO_KEY_1,PIN_GPIO_KEY_1},
								{PORT_GPIO_KEY_2,PIN_GPIO_KEY_2},
								{PORT_GPIO_KEY_3,PIN_GPIO_KEY_3}
};
const u16 KEY_EEPROM_ADDR[3]= {SW_BINDING_ONE_ADDR,SW_BINDING_TWO_ADDR,0};

Key_OPT_t Key_OPT[3];										//按键的固有状态量
#if (COMPLEX_TIME_NUM_IMPORT_FILTER_EN > 0u)
ComplexTimeNumImportFilter_t ComplexImportFilter;			//定义滤波器数据结构
static uint32_t key_map[3] = {1,2,4};						//按键的有效按键值
static uint32_t key_cnt[3] = {0};
#endif

#if (SIMPLE_TIME_NUM_IMPORT_FILTER_EN > 0u)
SimpleTimeNumImportFilter_t SimpleImportFilter;
#endif

/*******************************函数声明*************************************/
static void KeyBindingRelayHandle(u8 unit,u8 StateCMD,u8 ActionCMD,pKey_OPT_t pKey_OPT,pSw_Act_Base_t pSw_Act_Base);
static void KeyNoBindingRelayHandle(u8 unit,u8 StateCMD,u8 ActionCMD,pKey_OPT_t pKey_OPT);
static u32 InquireKey(void);
static void DeviceKeyBusyInstruct(void);
static void Key_FilterInit(void);

/*******************************************************************************
函 数 名:  void Key_Unit_Init(void)
功能说明:  按键单元初始化
参    数:  无
返 回 值:  无
*******************************************************************************/
void Key_Unit_Init(void)
{
    u8 i = 0;
    /*********************************按键初始化*********************************/
    for(i = 0; i < ArraryElementNum(Key_OPT); i++)
    {
        Key_OPT[i].KEY.pKeyPort       = (KeyPort_t *)&KeyPort[i];
        Key_OPT[i].KeyAct.Status      = (KEY_TYPE_t)(0x00);
        Key_OPT[i].KeySta.Status      = (KEY_TYPE_t)(0x00);
        Key_OPT[i].BindingEEPROMAddr  = KEY_EEPROM_ADDR[i];
        WTC6104BSI_Init(&Key_OPT[i]);
    }
	Key_FilterInit();
}

#if (COMPLEX_TIME_NUM_IMPORT_FILTER_EN > 0u)
/*******************************************************************************
函 数 名:	static void Key_FilterInit(void)
功能说明:	按键滤波器初始化
参    数:	无
返 回 值:	无
*******************************************************************************/
static void Key_FilterInit(void)
{
	ComplexImportFilter.import_all_space_threshold	= 5000;	//连续操作至保护模式时不可用时间间隔
	ComplexImportFilter.import_count_threshold		= 7;	//可以连续有效操作次数
	ComplexImportFilter.import_space_threshold		= 500;	//两次有效的按键间隔300ms
	ComplexImportFilter.import_map					= key_map;
	ComplexImportFilter.import_num					= sizeof(Key_OPT)/sizeof(Key_OPT[0]);
	ComplexImportFilter.import_travel_cycle			= 5;
	ComplexImportFilter.import_unvalid_flag			= 0;
	ComplexImportFilter.import_unvalid_count		= 0;
	ComplexImportFilter.import_valid_keep_time		= 1500;
	ComplexImportFilter.import_valid_count			= 0;
	ComplexImportFilter.import_valid_space_ptr		= key_cnt;
}
#endif

#if (SIMPLE_TIME_NUM_IMPORT_FILTER_EN > 0u)
/*******************************************************************************
函 数 名:	static void Key_FilterInit(void)
功能说明:	按键滤波器初始化
参    数:	无
返 回 值:	无
*******************************************************************************/
static void Key_FilterInit(void)
{
	SimpleImportFilter.import_all_space_threshold	= 8000;	//连续操作至保护模式时不可用时间间隔
	SimpleImportFilter.import_count_threshold		= 7;
	SimpleImportFilter.import_space_threshold		= 500;	//两次有效的按键间隔300ms
	SimpleImportFilter.import_travel_cycle			= 5;
	SimpleImportFilter.import_unvalid_flag			= 0u;
	SimpleImportFilter.import_unvalid_count			= 0u;
	SimpleImportFilter.import_valid_keep_time		= 3000;
	SimpleImportFilter.import_valid_count			= 0u;	//记录连续按下按键的次数
	SimpleImportFilter.import_valid_space_count		= (SimpleImportFilter.import_valid_keep_time/SimpleImportFilter.import_travel_cycle);
}
#endif


/*******************************************************************************
函 数 名:  static void KeyBindingRelayHandle(RelayAction_t *pRelayActionWithKey)
功能说明:  检测触摸按键是否被按下
参    数:  unit:按键所在的单元号
           StateCMD:状态资源按键属性号
           ActionCMD:动作资源按键属性号
           pKey_OPT:按键资源结构体指针
           pSw_Act_Base:开关执行器结构体指针
返 回 值:  无
*******************************************************************************/
static void KeyBindingRelayHandle(u8 unit,u8 StateCMD,u8 ActionCMD,pKey_OPT_t pKey_OPT,pSw_Act_Base_t pSw_Act_Base)
{
    switch(pKey_OPT->KEY.Key_Type)
    {
    case KEY_SHORT_PRESS:
    {
        if(GPIOx_Get(pSw_Act_Base->pControlPort->ControlPort,      /**> 若当前状态为开，取反后为关 **/
                     pSw_Act_Base->pControlPort->ControlPin))
        {
            PropEventFifo(unit,StateCMD, SRCEVENT , SWITCH_OFF);
        }
        else
        {
            PropEventFifo(unit,StateCMD, SRCEVENT , SWITCH_ON);
        }
        pKey_OPT->KeyAct.Status   = (KEY_TYPE_t)(0x01);
        PropEventFifo(unit,ActionCMD, SRCEVENT , KEY_SHORT);
        if(1 == gUnitData[((u32)pSw_Act_Base - (u32)(&Switch_Actuator.Sw_Act_Base[0]))/sizeof(pSw_Act_Base[0]) + 1].able)
        {
            pSw_Act_Base->SW_DelayClr();
            pSw_Act_Base->SW_REV();
        }
    }
    break;
    case KEY_LONG_PRESS:
    {
        pKey_OPT->KeyAct.Status = (KEY_TYPE_t)(0x02);
        PropEventFifo(unit,ActionCMD, SRCEVENT , KEY_LONG);
    }
    break;
    default:
        break;
    }
}

/*******************************************************************************
函 数 名:  static void KeyNoBindingRelayHandle(u8 unit,u8 StateCMD,u8 ActionCMD,pKey_OPT_t pKey_OPT)
功能说明:  检测触摸按键是否被按下
参    数:  unit:按键所在的单元号
           StateCMD:状态资源按键属性号
           ActionCMD:动作资源按键属性号
           pKey_OPT:按键资源结构体指针
返 回 值:  无
*******************************************************************************/
static void KeyNoBindingRelayHandle(u8 unit,u8 StateCMD,u8 ActionCMD,pKey_OPT_t pKey_OPT)
{
    switch(pKey_OPT->KEY.Key_Type)
    {
    case KEY_SHORT_PRESS:
    {
        if(pKey_OPT->KeySta.Status)
        {
            pKey_OPT->KeySta.Status = (KEY_TYPE_t)(0x00);
            PropEventFifo(unit,StateCMD, SRCEVENT , SWITCH_OFF);
        }
        else
        {
            pKey_OPT->KeySta.Status = (KEY_TYPE_t)(0x01);
            PropEventFifo(unit,StateCMD, SRCEVENT , SWITCH_ON);
        }
        pKey_OPT->KeyAct.Status = KEY_SHORT_PRESS;
        PropEventFifo(unit,ActionCMD, SRCEVENT , KEY_SHORT);
    }
    break;
    case KEY_LONG_PRESS:
    {
        pKey_OPT->KeyAct.Status = KEY_LONG_PRESS;
        PropEventFifo(unit,ActionCMD, SRCEVENT , KEY_LONG);
    }
    break;
    default:
        break;
    }
}

/*******************************************************************************
函 数 名:  static u8 InquireKey(void)
功能说明:  查询被按下的键值
参    数:  无
返 回 值:  有效的键号,0x00表示没有键值
*******************************************************************************/
static u32 InquireKey(void)
{
    u8 i,ucKeyNum = 0x00;
    Key_RefreshState(&Key_OPT[0].KEY);
    Key_RefreshState(&Key_OPT[1].KEY);
    Key_RefreshState(&Key_OPT[2].KEY);
    for(i = 0; i < sizeof(Key_OPT)/sizeof(Key_OPT[0]); i++)
    {
        if(KEY_NONE_PRESS != Key_OPT[i].KEY.Key_Type)
        {
            ucKeyNum |= (1U << i);
        }
    }
	if((1 == ucKeyNum)||(2 == ucKeyNum)||(4 == ucKeyNum))
	{
		return (ucKeyNum);
	}
	return UNVALID_IMPORT_VALUE;
}

/*******************************************************************************
函 数 名:  static void DeviceKeyBusyInstruct(void)
功能说明:  设备按键繁忙指示函数
参    数:  无
返 回 值:  无
*******************************************************************************/
static void DeviceKeyBusyInstruct(void)
{
	Thread_Login(MANY,20,100,LED_All_RVRS);
}

/*******************************************************************************
函 数 名:  static u32 KeyFilter(void)
功能说明:  按键消息过滤
参    数:  无
返 回 值:  TRUE/FALSE
*******************************************************************************/
static u32 KeyFilter(void)
{
    u32 key = InquireKey();
#if (COMPLEX_TIME_NUM_IMPORT_FILTER_EN > 0u)
	return ComplexTimeNumImportFilter(&ComplexImportFilter,key,DeviceKeyBusyInstruct);
#elif (SIMPLE_TIME_NUM_IMPORT_FILTER_EN > 0u)
	return SimpleTimeNumImportFilter(&SimpleImportFilter,key,DeviceKeyBusyInstruct);
#endif
}

/*******************************************************************************
函 数 名:  void TouchSwitch(void)
功能说明:  检测触摸按键是否被按下
参    数:  无
返 回 值:  无
*******************************************************************************/
void Key_Handle(void)
{
    u32 keynum = 0x00;
	keynum =  KeyFilter();
	if(UNVALID_IMPORT_VALUE != keynum)
	{
		Key_OPT[0].KeyAct.Status = KEY_NONE_PRESS;
		Key_OPT[1].KeyAct.Status = KEY_NONE_PRESS;
		Key_OPT[2].KeyAct.Status = KEY_NONE_PRESS;

		if((0 == Key_OPT[0].BindingState)&&
				(0 == Key_OPT[1].BindingState))
		{
			DeleteDlyAssMsg(1,1);
			DeleteDlyAssMsg(2,1);
			KeyBindingRelayHandle(KEY_UNIT,KEY1_STATE_CMD,KEY1_ACTION_CMD,&Key_OPT[0],&Switch_Actuator.Sw_Act_Base[0]);
			KeyBindingRelayHandle(KEY_UNIT,KEY2_STATE_CMD,KEY2_ACTION_CMD,&Key_OPT[1],&Switch_Actuator.Sw_Act_Base[1]);
			
			if(0x04 == keynum)
			{
				LED_Flash_Func(LED_3_ON,3,LED_NULL);
				KeyNoBindingRelayHandle(KEY_UNIT,KEY3_STATE_CMD,KEY3_ACTION_CMD,&Key_OPT[2]);
			}
		}
		else if(0 == Key_OPT[0].BindingState)
		{
			DeleteDlyAssMsg(1,1);
			KeyBindingRelayHandle(KEY_UNIT,KEY1_STATE_CMD,KEY1_ACTION_CMD,&Key_OPT[0],&Switch_Actuator.Sw_Act_Base[0]);
			switch(keynum)
			{
			case 0x02:
			{
				LED_Flash_Func(LED_23_ON,2,LED_3_OFF);
				KeyNoBindingRelayHandle(KEY_UNIT,KEY2_STATE_CMD,KEY2_ACTION_CMD,&Key_OPT[1]);
			}
			break;
			case 0x04:
			{
				LED_Flash_Func(LED_23_ON,3,LED_2_OFF);
				KeyNoBindingRelayHandle(KEY_UNIT,KEY3_STATE_CMD,KEY3_ACTION_CMD,&Key_OPT[2]);
			}
			break;
			default:
				break;
			}
		}
		else if(0 == Key_OPT[1].BindingState)
		{
			DeleteDlyAssMsg(2,1);
			KeyBindingRelayHandle(KEY_UNIT,KEY2_STATE_CMD,KEY2_ACTION_CMD,&Key_OPT[1],&Switch_Actuator.Sw_Act_Base[1]);
			switch(keynum)
			{
			case 0x01:
			{
				LED_Flash_Func(LED_13_ON,1,LED_3_OFF);
				KeyNoBindingRelayHandle(KEY_UNIT,KEY1_STATE_CMD,KEY1_ACTION_CMD,&Key_OPT[0]);
			}
			break;
			case 0x04:
			{
				LED_Flash_Func(LED_13_ON,3,LED_1_OFF);
				KeyNoBindingRelayHandle(KEY_UNIT,KEY3_STATE_CMD,KEY3_ACTION_CMD,&Key_OPT[2]);
			}
			break;
			default:
				break;
			}
		}
		else
		{
			switch(keynum)
			{
			case 0x01:
			{
				LED_Flash_Func(LED_ALL_ON,1,LED_23_OFF);
				KeyNoBindingRelayHandle(KEY_UNIT,KEY1_STATE_CMD,KEY1_ACTION_CMD,&Key_OPT[0]);
			}
			break;
			case 0x02:
			{
				LED_Flash_Func(LED_ALL_ON,2,LED_13_OFF);
				KeyNoBindingRelayHandle(KEY_UNIT,KEY2_STATE_CMD,KEY2_ACTION_CMD,&Key_OPT[1]);
			}
			break;
			case 0x04:
			{
				LED_Flash_Func(LED_ALL_ON,3,LED_12_OFF);
				KeyNoBindingRelayHandle(KEY_UNIT,KEY3_STATE_CMD,KEY3_ACTION_CMD,&Key_OPT[2]);
			}
			break;
			default:
				break;
			}
		}
		Upload(0);
	}
}

/******************************************************************************/

